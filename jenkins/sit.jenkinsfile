pipeline {
    agent any

    environment {
        ENVIRONMENT_NAME = 'sit'
        IMAGE_NAME = 'peerawitp/jenkins-lab'
        DOCKERFILE = './docker/Dockerfile'
        SONARQUBE_TOOL_NAME = 'sq1'
        SONARQUBE_PROJECT_KEY = 'jenkins-lab-sit'
        DEFECTDOJO_URL = 'http://nginx:8080'
        DEFECTDOJO_API_KEY = credentials('sit-defectdojo-token')
        DEFECTDOJO_ENGAGEMENT_ID = '1'
    }

    stages {
        stage('Prepare Git Repository') {
            steps {
                cleanWs()

                dir('code-resource') {
                    git url: 'https://github.com/peerawitp/jenkins-lab',
                    branch: 'sit'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('code-resource') {
                    script {
                        def scannerHome = tool "${SONARQUBE_TOOL_NAME}"
                        withSonarQubeEnv() {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                                    -Dsonar.sources=.
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${ENVIRONMENT_NAME}", "-f ./code-resource/${DOCKERFILE} ./code-resource")
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    def outputDir = "${WORKSPACE}/reports"
                    def outputFile = "trivy-report-${ENVIRONMENT_NAME}.json"
                    sh """
                        docker run \
                            -v /var/run/docker.sock:/var/run/docker.sock \
                            -v ${outputDir}:/output \
                            aquasec/trivy image --format json -o /output/${outputFile} ${IMAGE_NAME}:${ENVIRONMENT_NAME}
                    """

                    sh "cat $outputDir/$outputFile"
                }
            }
        }

        stage('Publish Report to DefectDojo') {
            steps {
                script {
                    sh """
                        echo "Uploading Trivy report to DefectDojo..."
                        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
                            -H "Authorization: Token $DEFECTDOJO_API_KEY" \
                            -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
                            -F "scan_type=Trivy Scan" \
                            -F "file=@${WORKSPACE}/reports/trivy-report-${ENVIRONMENT_NAME}.json" \
                            -F "active=true" -F "verified=false"
                    """
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub-peerawitp') {
                        def dockerImage = docker.image("${IMAGE_NAME}:${ENVIRONMENT_NAME}")
                        dockerImage.push()
                    }
                }
            }
        }
    }
}
